#!/usr/bin/env perl
# diskstat -- linux disk i/o stats (poor man's iostat)
# Author: Noah Friedman <friedman@splode.com>
# Created: 2010-01-18
# Public domain

# Commentary:
# Code:

use strict;
use warnings qw(all);

use Getopt::Long;
use Pod::Usage;

(my $progname = $0) =~ s=.*/==;

my %opt = ( sleep => 1,
            count => undef,
          );

sub xopen
{
  my $file = shift;
  open( my $fh, $file ) or die "$file: $!";
  return $fh;
}

sub collect
{
  my $fh = shift;
  my %want = map { $_ => undef } @_;
  my %dev;
  local $_;

  seek( $fh, 0, 0 );
  while (<$fh>)
    {
      chomp;
      s/^\s+//;
      my @f = split (/\s+/, $_);
      next unless (! %want || exists $want{$f[2]});
      $dev{$f[2]} = \@f;
    }
  return \%dev;
}

# The /proc/diskstats file displays the I/O statistics of block devices.
# Each line contains the following fields, times are in msec:
#
#	 0 - major number
#	 1 - minor mumber
#	 2 - device name
#	 3 - reads completed succesfully
#	 4 - reads merged
#	 5 - sectors read
#	 6 - time spent reading  (cumulative for each read)
#	 7 - writes completed
#	 8 - writes merged
#	 9 - sectors written
#	10 - time spent writing (ms)
#	11 - I/Os currently in progress
#	12 - time spent doing I/Os (ms)
#	13 - weighted time spent doing I/Os (ms)
#	14 - discards completed successfully		; kernel 4.18+
#	15 - discards merged
#	16 - sectors discarded
#	17 - time spent discarding (ms)
# 	18 - flush requests completed successfully	; kernel 5.5+
# 	19 - time spent flushing (ms)
#
# See kernel/Documentation/ABI/testing/procfs-diskstats
#     kernel/Documentation/admin-guide/iostats.rst
sub delta
{
  my ($old, $new) = @_;
  my %result;

  return $new unless $old;

  map { my $dev = $_;
        local *old = $old->{$dev};
        local *new = $new->{$dev};
        my @delta;

        for (my $i = 0; $i < @::new; $i++)
          {
            if ($i ==  2 || $i == 11)
              {
                push @delta, $::new[$i];
              }
            else
              {
                push @delta, ($::new[$i] - $::old[$i]);
              }
          }
        $result{$dev} = \@delta;
      } keys %$new;

  return \%result;
}

my @field_data =
  ( 'Dev'    => { idx =>  2,  width => -9 },

    '#Rd'    => { idx =>  3,  width =>  5 },
#   '#Rmerg' => { idx =>  4,  width =>  7 },
    'Rsect'  => { idx =>  5,  width =>  8 },
    'Rms'    => { idx =>  6,  width =>  5 },

    '#Wr'    => { idx =>  7,  width =>  5 },
#   '#Wmerg' => { idx =>  8,  width =>  7 },
    'Wsect'  => { idx =>  9,  width =>  8 },
    'Wms'    => { idx => 10,  width =>  5 },

    '#IO'    => { idx => 11,  width =>  5 },
    'IOms'   => { idx => 12,  width =>  5 },
    'wIOms'  => { idx => 13,  width =>  5 },

    '#Dscd'  => { idx => 14,  width =>  5 },
#   '#Dmerg' => { idx => 15,  width =>  7 },
    '#Dsect' => { idx => 16,  width =>  8 },
    '#Dms'   => { idx => 17,  width =>  5 },

    '#Flush' => { idx => 18,  width =>  5 },
    '#Fms'   => { idx => 19,  width =>  5 },
  );


sub make_fmt_data
{
  my @name;
  my @idx;
  my @width;
  for (my $i = 0; $i < @field_data; $i += 2)
    {
      push @name,  $field_data[$i];
      push @idx,   $field_data[$i+1]->{idx};
      push @width, $field_data[$i+1]->{width};
    }

  my $fmt = join ("  ", map { join ("", "%", $_, "s") } @width) . "\n";

  return $fmt, \@name, \@idx;
}

my $linecount = 0;
my $height    = 24;
my ($fmt, @header, @fields);

sub output
{
  my $data = shift;

  unless ($fmt)
    {
      my @fmtinfo = make_fmt_data();
      $fmt = $fmtinfo[0];
      @header = @{$fmtinfo[1]};
      @fields = @{$fmtinfo[2]};
    }

  my @keys = sort keys %$data;
  if (@keys > 1)
    {
      printf( $fmt, @header );
      map { printf( $fmt, @{$data->{$_}}[@fields] ) } @keys;
      print "\n";
    }
  else
    {
      printf( $fmt, @header ) if ($linecount % $height == 0);
      map { printf( $fmt, @{$data->{$_}}[@fields] ) } @keys;
      $linecount++;
    }
}

sub parse_options
{
  local *ARGV = \@{$_[0]}; # modify our local arglist, not real ARGV.
  my $help = 0;

  my $parser = Getopt::Long::Parser->new;
  $parser->configure( qw(bundling autoabbrev) );
  my $succ = $parser->getoptions
    ( 'h|help+'              => \$help,
      'usage'                => sub { $help = 1 },

      "c|count=i"            => \$opt{count},
      "s|sleep|interval=i"   => \$opt{sleep},
    );

  pod2usage( -exitstatus => 1, -verbose => 0 )         unless $succ;
  pod2usage( -exitstatus => 0, -verbose => $help - 1 ) if $help > 0;

  $opt{count} = 1 if defined( $opt{count} ) && $opt{count} < 1;
}

sub main
{
  ($progname = $0) =~ s=.*/==;
  parse_options( \@_ );

  my $fh = xopen( '/proc/diskstats' );

  my ($old, $new) = (undef, undef);
  my $iter = $opt{count};
  while (1)
    {
      $new = collect( $fh, @_ );
      if ($old)
        {
          output( delta( $old, $new ));
          last if defined( $iter ) && --$iter == 0;
          sleep( $opt{sleep} );
        }
      else
        { sleep( 1 ) }
      $old = $new;
    }
}

main (@ARGV);

# eof

#!/usr/bin/env python3
# mdnf -- my dnf frontend with changes to 'search' command
# Author: Noah Friedman <friedman@splode.com>
# Created: 2016-08-03
# Public domain

# Commentary:

# (2022-03-04 some of this is mitigated now, but its still hard to read)
# I find it hard to read the output from 'dnf search' when results are not
# in alphabetical order.  Its algorithm for prioritizing results isn't
# transparent enough to make sense to me, especially when there are dozens
# of results.  The lack of column alignment also makes it difficult to scan.

# Major differences in this version:
#	* Results are in alphabetical order
#	* Version number, architecture, and repository are included.
#	* Columns are aligned
# 	* If multiple search terms provided then select the conjunction,
# 	  rather than the disjunction, of the results.  That is, results
# 	  must match all terms, not just any of them.
#       * Output is not folded (doing so breaks pipelines)

# Code:

# Needed in case we have to exec this using python2 on older fedoras
from __future__ import print_function

import sys
import fcntl
import termios
import struct

def _my_term_width( fd=1 ):
    try:
        buf = 'abcdefgh'
        buf = fcntl.ioctl( fd, termios.TIOCGWINSZ, buf )
        ret = struct.unpack( b'hhhh', buf )[1]
        if ret == 0: return 256
        if ret < 20: return  20
        return ret
    except IOError:
        return 256

# We don't use this for the search command anymore, but
# monkeypatch it for any other commands that might try to use it.
from dnf.cli import term
term._term_width = _my_term_width


import dnf.match_counter

column_brevity = False

def _my_search( self, args ):
    counter = dnf.match_counter.MatchCounter()

    search_cols = [ 'name', 'summary', ]
    try:
        if self.opts.all:
            search_cols.extend( ('description', 'url') )
    except AttributeError:
        pass

    for arg in args:
        for col in search_cols:
            self._search_counted( counter, col, arg )

    try:
        if not self.opts.all:
            needles = len( args )
            for pkg in tuple( counter.keys() ):
                if len( counter.matched_needles( pkg )) != needles:
                    del counter[ pkg ]
    except AttributeError:
        pass

    results = counter
    if not self.base.conf.showdupesfromrepos:
        results = self.base.sack.query().filterm( pkg=counter.keys() ).latest()

    allargs = set( args )
    seen    = set()
    row     = []
    for pkg in sorted( results, key=lambda k: str( k ).lower() ):
        # include version/release in 'seen' key, in case the repo has an
        # updated version from what was installed.  Given this loop is
        # sorted, we should see rows for installed packages before the
        # corresponding repo one.
        ukey = pkg.name + pkg.version + pkg.release + pkg.arch
        if pkg.reponame == '@System':
            shown_reponame = '*' + pkg.from_repo
        else:
            shown_reponame = ' ' + pkg.reponame

        if column_brevity:
            # For brevity's sake we don't care about version, arch, etc.
            if pkg.name in seen:
                continue
            seen.add( pkg.name )
        elif ukey in seen:
            continue
        seen.add( ukey )

        if counter.matched_needles( pkg ) != allargs:
            continue

        if column_brevity:
            row.append( (pkg.name, pkg.summary) )
        else:
            row.append( (pkg.name,
                         pkg.version + '-' + pkg.release,
                         pkg.arch,
                         shown_reponame,
                         pkg.summary) )

    if len( row ) == 0:
        raise dnf.exceptions.Error( 'No matches found.' )

    width = [ max( len( r[i] ) for r in row )
              for i in range( len( row[0] ))
            ]
    width[-1] = ''  # don't pad out last column
    fmt = '  '.join ( '{{:<{}}}'.format( w ) for w in width )
    for r in row:
        print( fmt.format( *r ))

# monkeypatch
from dnf.cli.commands.search import SearchCommand
SearchCommand._search = _my_search


# Filter /usr/lib/.build-id files out of "repoquery --list" commands
from dnf.cli.commands.repoquery import PackageWrapper
from dnf.i18n import ucd

def _files( self ):
    nfiles = []
    prefix = '/usr/lib/.build-id'
    minlen = len( prefix )
    for f in self._pkg.files:
        if not (len( f ) >= minlen and f[ 0:minlen ] == prefix):
            nfiles.append( f )
    # mimic PackageWrapper.__getattr__
    return '\n'.join( sorted( { ucd( elt ) for elt in nfiles } ))

PackageWrapper.files = property( lambda self: _files( self ) )


# TODO: this still needs some work to be reusable in an interactive
# session, because dnf's main entrypoint will barf on repeated attempts
# to initialize plugins.
def mdnf( args=sys.argv, exit_code=False ):
    from dnf.cli import main
    try:
        args = list( args ) # copy
        if args[1] in ('-b', '--brief', '--brevity'):
            global column_brevity
            column_brevity = True
            args.pop( 1 )
        args.insert( 1, '--quiet' )
        if args[1] in ( 'search', 'se' ):
            args.insert( 1, '--cacheonly' )
        main.user_main( args[1:], exit_code=exit_code )
    except KeyboardInterrupt:
        pass

if __name__ == '__main__':
    mdnf( sys.argv, exit_code=True )

# eof
